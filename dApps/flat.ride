{-# STDLIB_VERSION 4 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let version = "2.0.0"

let kVersion = "version"
let kActive = "active"
let kAssetIdA = "A_asset_id"
let kAssetIdB = "B_asset_id"
let kBalanceA = "A_asset_balance"
let kBalanceB = "B_asset_balance"
let kShareAssetId = "share_asset_id"
let kShareAssetSupply = "share_asset_supply"
let kFee = "commission"
let kFeeScaleDelimiter = "commission_scale_delimiter"
let kInvariant = "invariant"
let kCause = "shutdown_cause"

let adm1 = base58'DXDY2itiEcYBtGkVLnkpHtDFyWQUkoLJz79uJ7ECbMrA'
let adm2 = base58'E6Wa1SGoktYcjHjsKrvjMiqJY3SWmGKcD8Q5L8kxSPS7'
let adm3 = base58'AZmWJtuy4GeVrMmJH4hfFBRApe1StvhJSk4jcbT6bArQ'
let admStartStop = base58'EtVkT6ed8GtbUiVVEqdmEqsp2J4qbb3rre2HFgxeVYdg'
let admStaking = base58'Czn4yoAuUZCVCLJDRfskn8URfkwpknwBTZDbs1wFrY7h'

let govAddr = Address(base58'3P6J84oH51DzY6xk2mT5TheXRbrCwBMxonp')
let stakingAddress = Address(base58'3PNikM6yp4NqcSU8guxQtmR5onr2D4e8yTJ')

let USDN = base58'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p'
let stakingFeeInUSDN = 9 * assetInfo(USDN).value().minSponsoredFee.value() # sponsored fee for invoke called from scripted account
let maxFeeAmountUSDN = 270000
let maxFeeAmountWaves = 900000

let isActive = this.getBooleanValue(kActive)

let strAssetIdA = this.getStringValue(kAssetIdA)
let strAssetIdB = this.getStringValue(kAssetIdB)
let assetIdA = if strAssetIdA == "WAVES" then unit else strAssetIdA.fromBase58String()
let assetIdB = if strAssetIdB == "WAVES" then unit else strAssetIdB.fromBase58String()
let assetNameA = match assetIdA {
    case id: ByteVector => assetInfo(id).value().name
    case waves: Unit => "WAVES"
}
let assetNameB = match assetIdB {
    case id: ByteVector => assetInfo(id).value().name
    case waves: Unit => "WAVES"
}
let balanceA = this.getIntegerValue(kBalanceA)
let balanceB = this.getIntegerValue(kBalanceB)
let shareAssetId = this.getStringValue(kShareAssetId).fromBase58String()
let shareAssetSupply = this.getIntegerValue(kShareAssetSupply)
let invariant = this.getIntegerValue(kInvariant)

let fee = 500 # fee/feeScale6 = 0.0005
let feeGovernance = 200 # feeGovernance/feeScale6 = 0.0002. 3/5 fee back to the dApp, 2/5 sends to the governance address
let feeScale6 = 1000000

let scale3 = 1000
let scale8 = 100000000
let scale12 = 1000000000000
let slippageScale3 = 1000
let digits8 = 8

let dAppThreshold = 50 # dAppThresholdAmount/dAppThresholdAmountDelimiter = 0.5
let dAppThresholdScale2 = 100

let exchangeRatioLimitMin = 90000000 # 0.9*scale8. This parameter helps to avoid losses when an incorrect argument is passed
let exchangeRatioLimitMax = 110000000 #1.1*scale8. This parameter helps to avoid losses when an incorrect argument is passed

let alpha = 50 # model coefficient alpha = 0.15 with 2 digits
let alphaDigits = 2
let beta = 46000000 # model coefficient beta = 0.46 with 8 digits

func accountBalance(assetId: ByteVector|Unit) = match assetId {
    case id: ByteVector => this.assetBalance(id)
    case waves: Unit => this.wavesBalance().available
}

let stakedAmountUSDN = match stakingAddress.getInteger("rpd_balance_" + USDN.toBase58String() + "_" + this.toString()) {
    case staked: Int => staked
    case nothing: Unit => 0
}

let availableBalanceA = balanceA - if assetIdA == USDN then stakedAmountUSDN else 0
let availableBalanceB = balanceB - if assetIdB == USDN then stakedAmountUSDN else 0
let accountBalanceWithStakedA = accountBalance(assetIdA) + if assetIdA == USDN then stakedAmountUSDN else 0
let accountBalanceWithStakedB = accountBalance(assetIdB) + if assetIdB == USDN then stakedAmountUSDN else 0

let hasEnoughBalance = accountBalanceWithStakedA >= balanceA && accountBalanceWithStakedB >= balanceB

# skewness = 0.5*(x/y+y/x)
# Each fraction multiple by scale in order to avoid zeroing
# During working on this fraction scale8 was switched to scale12. To unscale back to 8 digits added /10000
func skewness(x: Int, y: Int) = (scale12.fraction(x, y) + scale12.fraction(y, x)) / 2 / 10000

# Calculate (x+y)*skewness^(-alpha) + 2*(x*y)^0.5*(skewness-beta)^alpha
func invariantCalc(x: Int, y: Int) = {
    let sk = skewness(x, y)
    fraction(
        x + y,
        scale8,
        pow(sk, digits8, alpha, alphaDigits, digits8, UP)
    ) + 2 * fraction(
        pow(fraction(x, y, scale8), 0, 5, 1, digits8 / 2, DOWN),
        pow(sk - beta, digits8, alpha, alphaDigits, digits8, DOWN),
        scale8
    )
}

func calculateSendAmount(amountToSendEstimated: Int, minTokenReceiveAmount: Int, tokenReceiveAmount: Int, tokenId: ByteVector|Unit) = {
    let slippageValue = scale8 - scale8 * 1 / 10000000 # 0.000001% of slippage
    let deltaBetweenMaxAndMinSendValue = amountToSendEstimated - minTokenReceiveAmount

    # only one of the variables will be used depending on the token
    let x = balanceA + tokenReceiveAmount
    let y = balanceB + tokenReceiveAmount

    let invariantNew =
        if tokenId == assetIdA then
            invariantCalc(x, balanceB - amountToSendEstimated)
        else if tokenId == assetIdB then
            invariantCalc(balanceA - amountToSendEstimated, y)
        else throw("Wrong asset in payment")

    let invariantEstimatedRatio = scale8.fraction(invariant, invariantNew)

    func getStepAmount(acc: Int, step: Int) = {
      if acc == -1 then
        let amountToSend = amountToSendEstimated - step * deltaBetweenMaxAndMinSendValue / 5
        let stepInvariant =
            if tokenId == assetIdA then
                invariantCalc(x, balanceB - amountToSend)
            else invariantCalc(balanceA - amountToSend, y)

        if stepInvariant > invariant then
            amountToSend
        else
          -1
      else
        acc
    }

    let stepAmount = FOLD<5>([1, 2, 3, 4, 5], -1, getStepAmount)
    
    if stepAmount < 0 then
        throw("something went wrong while working with amountToSend") # TODO when?
    else if invariantEstimatedRatio > slippageValue && invariantNew > invariant then
        amountToSendEstimated
    else
        stepAmount
}

func getAssetInfo(assetId: ByteVector|Unit) = match assetId {
    case id: ByteVector =>
        let stringId = id.toBase58String()
        let info = assetInfo(id).valueOrErrorMessage("Asset " + stringId + " doesn't exist")
        (stringId, info.name, info.decimals)
    case waves: Unit => ("WAVES", "WAVES", 8)
}

func suspend(cause: String) = [
    BooleanEntry(kActive, false),
    StringEntry(kCause, cause)
]

func deductStakingFee(amount: Int, assetId: ByteVector|Unit) =
    if assetId == USDN then {
        let result = amount - stakingFeeInUSDN

        if result <= 0 then
            throw("Insufficient amount " + amount.toString()
                + " to deduct staking fee " + stakingFeeInUSDN.toString() + " USD-N")
        else result
    } else amount

func throwIsActive() = throw("DApp is already active")
func throwIsInactive() = throw("DApp is inactive at this moment")
func throwOnlyAdmin() = throw("Only admin can call this function")
func throwAssets() = throw("Incorrect assets attached. Expected: " + strAssetIdA + " and " + strAssetIdB)
func throwThreshold(threshold: Int, amountA: Int, amountB: Int) = throw("New balance in assets of the DApp is less than threshold " + threshold.toString()
    + ": " + amountA.toString() + " " + assetNameA + ", " + amountB.toString() + " " + assetNameB)
func throwInsufficientAvailableBalance(amount: Int, available: Int, assetName: String) = throw("Insufficient DApp balance to pay "
    + amount.toString() + " " + assetName + " due to staking. Available: "
    + available.toString() + " " + assetName +  ". Please contact support in Telegram: https://t.me/swopfisupport")
func throwInsufficientAvailableBalances(amountA: Int, amountB: Int) = throw("Insufficient DApp balance to pay "
    + amountA.toString() + " " + assetNameA + " and "  + amountB.toString() + " " + assetNameB
    + " due to staking. Available: "
    + availableBalanceA.toString() + " " + assetNameA + " and "  + availableBalanceB.toString() + " " + assetNameB
    +  ". Please contact support in Telegram: https://t.me/swopfisupport")
func suspendSuspicious() = suspend("Suspicious state. Actual balances: " + balanceA.toString() + " " + assetNameA + ", " + balanceB.toString() + " " + assetNameB
        + ". State: " + accountBalance(assetIdA).toString() + " " + assetNameA + ", " + accountBalance(assetIdB).toString() + " " + assetNameB)

@Callable(i)
func init() = {
    let (pmtAmountA, pmtAssetIdA) = (i.payments[0].amount, i.payments[0].assetId)
    let (pmtAmountB, pmtAssetIdB) = (i.payments[1].amount, i.payments[1].assetId)
    let (pmtStrAssetIdA, pmtAssetNameA, pmtDecimalsA) = getAssetInfo(pmtAssetIdA)
    let (pmtStrAssetIdB, pmtAssetNameB, pmtDecimalsB) = getAssetInfo(pmtAssetIdB)

    if this.getBoolean(kActive).isDefined() then
        throwIsActive()
    else if pmtAssetIdA == pmtAssetIdB then
        throw("Assets must be different")
    else {
        let shareName = "s" + pmtAssetNameA.take(7) + "_" + pmtAssetNameB.take(7)
        let shareDescription = "ShareToken of SwopFi protocol for " + pmtAssetNameA + " and " + pmtAssetNameB + " at address " + this.toString()

        # we save 16 digit info with using digits8 in pow functions. We divide /scale8 to delete 8 digits and another 8 digits we define as digits in shareToken in Issue tx
        let shareDecimals = (pmtDecimalsA + pmtDecimalsB) / 2
        let shareInitialSupply = fraction(
            pow(pmtAmountA, pmtDecimalsA, 5, 1, pmtDecimalsA, HALFDOWN),
            pow(pmtAmountB, pmtDecimalsB, 5, 1, pmtDecimalsB, HALFDOWN),
            pow(10, 0, shareDecimals, 0, 0, HALFDOWN)
        )
        let shareIssue = Issue(shareName, shareDescription, shareInitialSupply, shareDecimals, true)
        let shareIssueId = shareIssue.calculateAssetId()

        let invariantCalculated = invariantCalc(pmtAmountA, pmtAmountB)
        [
            StringEntry(kVersion, version),
            BooleanEntry(kActive, true),
            StringEntry(kAssetIdA, pmtStrAssetIdA),
            StringEntry(kAssetIdB, pmtStrAssetIdB),
            IntegerEntry(kBalanceA, pmtAmountA),
            IntegerEntry(kBalanceB, pmtAmountB),
            IntegerEntry(kInvariant, invariantCalculated),
            IntegerEntry(kFee, fee),
            IntegerEntry(kFeeScaleDelimiter, feeScale6),
            shareIssue,
            StringEntry(kShareAssetId, shareIssueId.toBase58String()),
            IntegerEntry(kShareAssetSupply, shareInitialSupply),
            ScriptTransfer(i.caller, shareInitialSupply, shareIssueId)
        ]
    }
}

# if someone ready to replenish in both tokens. It's necessary to bring tokens amount in proportion according to dApp state
@Callable(i)
func replenishWithTwoTokens(slippageTolerance: Int) = {
    let pmtAssetIdA = i.payments[0].assetId
    let pmtAssetIdB = i.payments[1].assetId
    # block for accounting the cost of fees for staking operations
    let pmtAmountA = deductStakingFee(i.payments[0].amount, pmtAssetIdA)
    let pmtAmountB = deductStakingFee(i.payments[1].amount, pmtAssetIdB)

    # fraction should be equal 1(multiple by 1000) if depositor replenish with proportion according to actual price
    let tokenRatio = scale8.fraction(balanceA, pmtAmountA)
                    .fraction(scale3, scale8.fraction(balanceB, pmtAmountB))

    let ratioShareTokensInA = scale8.fraction(pmtAmountA, balanceA)
    let ratioShareTokensInB = scale8.fraction(pmtAmountB, balanceB)
    let shareTokenToPayAmount = min([ratioShareTokensInA, ratioShareTokensInB]).fraction(shareAssetSupply, scale8)

    let invariantCalculated = invariantCalc(balanceA + pmtAmountA, balanceB + pmtAmountB)

    if !isActive then
        throwIsInactive()
    else if slippageTolerance < 0 || slippageTolerance > 10 then
        throw("Slippage tolerance must be <= 1%")
    else if i.payments.size() != 2 then
        throw("Two attached assets expected")
    else if pmtAssetIdA != assetIdA || pmtAssetIdB != assetIdB then
        throwAssets()
    else if tokenRatio < (scale3 * (slippageScale3 - slippageTolerance)) / slippageScale3
            || tokenRatio > (scale3 * (slippageScale3 + slippageTolerance)) / slippageScale3 then
        throw("Incorrect assets amount: amounts must have the contract ratio")
    else if shareTokenToPayAmount == 0 then
        throw("Too small amount to replenish")
    else if !hasEnoughBalance then
        suspendSuspicious()
    else [
        IntegerEntry(kBalanceA, balanceA + pmtAmountA),
        IntegerEntry(kBalanceB, balanceB + pmtAmountB),
        IntegerEntry(kShareAssetSupply, shareAssetSupply + shareTokenToPayAmount),
        IntegerEntry(kInvariant, invariantCalculated),
        Reissue(shareAssetId, shareTokenToPayAmount, true),
        ScriptTransfer(i.caller, shareTokenToPayAmount, shareAssetId)
    ]
}

# if someone ready to replenish in one token
@Callable(i)
func replenishWithOneToken(virtualSwapTokenPay: Int, virtualSwapTokenGet: Int) = {
    let (pmtAmount, pmtAssetId) = (i.payments[0].amount, i.payments[0].assetId)

    let pmtMinThreshold = 5000000
    let thresholdValueForMinTolerance = 50000000
    let tolerance = if pmtAmount < thresholdValueForMinTolerance then 100000 else 1

    let slippageValueMinForReplenish = scale8 - scale8 * tolerance / 10000000 # if pmtAmount > 50.000000 then slippage = 0.000001%
    let slippageValueMaxForReplenish = scale8 + scale8 * tolerance / 10000000

    let slippageValueMinForSwap = scale8 - scale8 * 1 / 10000000
    let slippageValueMaxForSwap = scale8 + scale8 * 1 / 10000000

    if !isActive then
        throwIsInactive()
    else if pmtAmount < pmtMinThreshold then
        throw("Payment amount " + pmtAmount.toString() + " does not exceed the minimum amount of " + pmtMinThreshold.toString() + " tokens")
    else if i.payments.size() != 1 then
        throw("One attached payment expected")
    else if !hasEnoughBalance then
        suspendSuspicious()
    else if pmtAssetId != assetIdA && pmtAssetId != assetIdB then
        throwAssets()
    else {
        let (virtualReplenishA, virtualReplenishB,
            balanceAfterSwapA, balanceAfterSwapB,
            invariantCalculated,
            newBalanceA, newBalanceB) =
            if pmtAssetId == assetIdA then (
                pmtAmount - virtualSwapTokenPay, virtualSwapTokenGet,
                balanceA + virtualSwapTokenPay, balanceB - virtualSwapTokenGet,
                invariantCalc(balanceA + pmtAmount, balanceB),
                balanceA + pmtAmount, balanceB
            ) else (
                virtualSwapTokenGet, pmtAmount - virtualSwapTokenPay,
                balanceA - virtualSwapTokenGet, balanceB + virtualSwapTokenPay,
                invariantCalc(balanceA, balanceB + pmtAmount),
                balanceA, balanceB + pmtAmount
            )
        let newBalanceEntry =
            if pmtAssetId == assetIdA then
                IntegerEntry(kBalanceA, newBalanceA)
            else IntegerEntry(kBalanceB, newBalanceB)

        let invariantNew = invariantCalc(balanceAfterSwapA, balanceAfterSwapB)
        let invariantEstimatedRatio = scale8.fraction(invariant, invariantNew)

        let ratioVirtualBalanceToVirtualReplenish = (scale8 * scale8).fraction(balanceAfterSwapA, balanceAfterSwapB)
                                                    / scale8.fraction(virtualReplenishA, virtualReplenishB)
        let dAppThresholdAmount = fraction(newBalanceA + newBalanceB, dAppThreshold, 2 * dAppThresholdScale2)
        
        if invariantEstimatedRatio <= slippageValueMinForSwap || invariantNew < invariant then
            throw("Incorrect virtualSwapTokenPay or virtualSwapTokenGet value")
        else if ratioVirtualBalanceToVirtualReplenish < slippageValueMinForReplenish || ratioVirtualBalanceToVirtualReplenish > slippageValueMaxForReplenish then
            throw("Swap with virtualSwapTokenPay and virtualSwapTokenGet is possible, but ratio after virtual swap is incorrect")
        else if newBalanceA < dAppThresholdAmount || newBalanceB < dAppThresholdAmount then
            throwThreshold(dAppThresholdAmount, newBalanceA, newBalanceB)
        else {
            # fee for staking operation
            let ratioShareTokensInA = virtualReplenishA.deductStakingFee(assetIdA).fraction(scale8, balanceAfterSwapA)
            let ratioShareTokensInB = virtualReplenishB.deductStakingFee(assetIdB).fraction(scale8, balanceAfterSwapB)

            let shareTokenToPayAmount = min([ratioShareTokensInA, ratioShareTokensInB]).fraction(shareAssetSupply, scale8)

            [
                Reissue(shareAssetId, shareTokenToPayAmount, true),
                ScriptTransfer(i.caller, shareTokenToPayAmount, shareAssetId),
                IntegerEntry(kShareAssetSupply, shareAssetSupply + shareTokenToPayAmount),
                newBalanceEntry,
                IntegerEntry(kInvariant, invariantCalculated)
            ]
        }
    }
}

@Callable(i)
func withdraw() = {
    let (pmtAmount, pmtAssetId) = (i.payments[0].amount, i.payments[0].assetId)

    # block for accounting the cost of fees for staking operations
    let amountToPayA = pmtAmount.fraction(balanceA, shareAssetSupply).deductStakingFee(assetIdA)
    let amountToPayB = pmtAmount.fraction(balanceB, shareAssetSupply).deductStakingFee(assetIdB)

    let invariantCalculated = invariantCalc(balanceA - amountToPayA, balanceB - amountToPayB)

    if !isActive then
        throwIsInactive()
    else if i.payments.size() != 1 then
        throw("One attached payment expected")
    else if pmtAssetId != shareAssetId then
        throw("Incorrect asset attached. Expected: " + shareAssetId.toBase58String())
    else if !hasEnoughBalance then
        suspendSuspicious()
    else if amountToPayA > availableBalanceA || amountToPayB > availableBalanceB then
        throwInsufficientAvailableBalances(amountToPayA, amountToPayB)
    else [
        IntegerEntry(kBalanceA, balanceA - amountToPayA),
        IntegerEntry(kBalanceB, balanceB - amountToPayB),
        IntegerEntry(kShareAssetSupply, shareAssetSupply - pmtAmount),
        IntegerEntry(kInvariant, invariantCalculated),
        Burn(shareAssetId, pmtAmount),
        ScriptTransfer(i.caller, amountToPayA, assetIdA),
        ScriptTransfer(i.caller, amountToPayB, assetIdB)
    ]
}

@Callable(i)
func exchange(estimatedAmountToReceive: Int, minAmountToReceive: Int) = {
    let (pmtAmount, pmtAssetId) = (i.payments[0].amount, i.payments[0].assetId)
    
    if !isActive then
        throwIsInactive()
    else if estimatedAmountToReceive <= 0 then
        throw("Estimated amount must be positive. Actual: " + estimatedAmountToReceive.toString())
    else if minAmountToReceive > estimatedAmountToReceive then
        throw("Minimal amount can't be greater than estimated. Estimated: " + estimatedAmountToReceive.toString() + ". Minimal: " + minAmountToReceive.toString())
    else if i.payments.size() != 1 then
        throw("One attached payment expected")
    else if !hasEnoughBalance then
        suspendSuspicious()
    else if pmtAssetId != assetIdA && pmtAssetId != assetIdB then
        throwAssets()
    else if pmtAmount < 10000000 then
        throw("Only swap of 10.000000 or more tokens is allowed")
    else if scale8.fraction(minAmountToReceive, pmtAmount) < exchangeRatioLimitMin ||
            scale8.fraction(estimatedAmountToReceive, pmtAmount) > exchangeRatioLimitMax then
        throw("Incorrect args and pmt ratio")
    else {
        let sendAssetId = if pmtAssetId == assetIdA then assetIdB else assetIdA

        let amount = calculateSendAmount(estimatedAmountToReceive, minAmountToReceive, pmtAmount, pmtAssetId)
        let governanceReward = amount.fraction(feeGovernance, feeScale6)
        let amountMinusFee = amount.fraction(feeScale6 - fee, feeScale6)

        let (newBalanceA, newBalanceB) = 
            if pmtAssetId == assetIdA then
                (balanceA + pmtAmount, balanceB - amountMinusFee - governanceReward)
            else
                (balanceA - amountMinusFee - governanceReward, balanceB + pmtAmount)
        let dAppThresholdAmount = fraction(newBalanceA + newBalanceB, dAppThreshold, 2 * dAppThresholdScale2)

        if newBalanceA < dAppThresholdAmount || newBalanceB < dAppThresholdAmount then
            throwThreshold(dAppThresholdAmount, newBalanceA, newBalanceB)
        else if assetIdA == USDN && sendAssetId == assetIdA && newBalanceA <= stakedAmountUSDN then
            throwInsufficientAvailableBalance(amountMinusFee, availableBalanceA, assetNameA)
        else if assetIdB == USDN && sendAssetId == assetIdB && newBalanceB <= stakedAmountUSDN then
            throwInsufficientAvailableBalance(amountMinusFee, availableBalanceB, assetNameB)
        else
            # successful execution result is updating information about actual balance and supply into the state and transfer tokens to the caller
            [
                IntegerEntry(kBalanceA, newBalanceA),
                IntegerEntry(kBalanceB, newBalanceB),
                IntegerEntry(kInvariant, invariantCalc(newBalanceA, newBalanceB)),
                ScriptTransfer(i.caller, amountMinusFee, sendAssetId),
                ScriptTransfer(govAddr, governanceReward, sendAssetId)
            ]
    }
}

@Callable(i)
func shutdown() =
    if !isActive then
        throw("DApp is already suspended. Cause: " + this.getString(kCause).valueOrElse("the cause wasn't specified"))
    else if ![adm1, adm2, adm3, admStartStop].containsElement(i.callerPublicKey) then
        throwOnlyAdmin()
    else
        suspend("Paused by admin")

@Callable(i)
func activate() =
    if isActive then
        throwIsActive()
    else if ![adm1, adm2, adm3, admStartStop].containsElement(i.callerPublicKey) then
        throwOnlyAdmin()
    else [
        BooleanEntry(kActive, true),
        DeleteEntry(kCause)
    ]

@Callable(i)
func takeIntoAccountExtraFunds(amountLeave: Int) = {
    let uncountableA = accountBalanceWithStakedA - balanceA
    let uncountableB = accountBalanceWithStakedB - balanceB
    let amountEnrollA = uncountableA - if assetIdA == USDN then amountLeave else 0
    let amountEnrollB = uncountableB - if assetIdB == USDN then amountLeave else 0

    if !isActive then
            throwIsInactive()
    else if i.caller != this then
        throwOnlyAdmin()
    else if amountLeave < 0 then
        throw("Argument 'amountLeave' cannot be negative. Actual: " + amountLeave.toString())
    else if uncountableA < 0 || uncountableB < 0 then
        suspend("Enroll amount negative")
    else if amountEnrollA < 0 || amountEnrollB < 0 then
        throw("Too large amountLeave")
    else
        [
            IntegerEntry(kBalanceA, balanceA + amountEnrollA),
            IntegerEntry(kBalanceB, balanceB + amountEnrollB),
            IntegerEntry("last_income_"+strAssetIdA, amountEnrollA),
            IntegerEntry("last_income_"+strAssetIdB, amountEnrollB)
        ]
}

@Verifier(tx)
func verify() = match tx {
    case invoke: InvokeScriptTransaction =>
        let feeIsOk = if ((invoke.feeAssetId == unit && invoke.fee <= maxFeeAmountWaves)
            || (invoke.feeAssetId == USDN && invoke.fee <= maxFeeAmountUSDN)) then true
            else false
        let callTakeIntoAccount = invoke.dApp == this && invoke.function == "takeIntoAccountExtraFunds"
        let callStaking =
            invoke.dApp == stakingAddress
            && (
                (invoke.function == "lockNeutrino" && invoke.payments.size() == 1 && invoke.payments[0].assetId == USDN)
                || (invoke.function == "unlockNeutrino" && invoke.payments.size() == 0)
            )
        let signedByAdmin =
            sigVerify(tx.bodyBytes, tx.proofs[0], adm1)
            || sigVerify(tx.bodyBytes, tx.proofs[0], adm2)
            || sigVerify(tx.bodyBytes, tx.proofs[0], adm3)
            || sigVerify(tx.bodyBytes, tx.proofs[0], admStaking)

        (callTakeIntoAccount || callStaking) && signedByAdmin && feeIsOk
    case _ => {
        let adm1Signed = if sigVerify(tx.bodyBytes, tx.proofs[0], adm1) then 1 else 0
        let adm2Signed = if sigVerify(tx.bodyBytes, tx.proofs[1], adm2) then 1 else 0
        let adm3Signed = if sigVerify(tx.bodyBytes, tx.proofs[2], adm3) then 1 else 0
        adm1Signed + adm2Signed + adm3Signed >= 2
    }
}
