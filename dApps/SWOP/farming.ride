{-# STDLIB_VERSION 4 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let adminPubKey1 = base58'DXDY2itiEcYBtGkVLnkpHtDFyWQUkoLJz79uJ7ECbMrA'
let adminPubKey2 = base58'E6Wa1SGoktYcjHjsKrvjMiqJY3SWmGKcD8Q5L8kxSPS7'
let adminPubKey3 = base58'AZmWJtuy4GeVrMmJH4hfFBRApe1StvhJSk4jcbT6bArQ'

let keyShareTokensLocked = "_total_share_tokens_locked" # with prefix(pool identity) get info about total share locked in this pool
let kShareLimit = "share_limit_on_first_harvest"
let keyRewardPoolFractionCurrent = "_current_pool_fraction_reward"
let keyRewardPoolFractionPrevious = "_previous_pool_fraction_reward"
let keyTotalRewardPerBlockCurrent = "total_reward_per_block_current"
let keyTotalRewardPerBlockPrevious = "total_reward_per_block_previous"
let keyRewardUpdateHeight = "reward_update_height"
let keyLastInterest = "_last_interest"
let keyLastInterestHeight = "_last_interest_height"
let keyUserShareTokensLocked = "_share_tokens_locked"
let keyUserLastInterest = "_last_interest"
let keySWOPid = "SWOP_id"
let keyUserSWOPClaimedAmount = "_SWOP_claimed_amount"
let keyUserSWOPLastClaimedAmount = "_SWOP_last_claimed_amount"
let keyAvailableSWOP = "_available_SWOP"
let keyFarmingStartHeight = "farming_start_height"
let keyAPY = "apy"
let kPreviousTotalVoteSWOP = "previous_total_vote_SWOP"
let keySwopYearEmission = "swop_year_emission"
let keyBalancecpmmA = "A_asset_balance"
let keyBalancecpmmB = "B_asset_balance"
let kHarvestPoolActiveVoteStrucVoting = "_harvest_pool_activeVote_struc"
let kHarvestUserPoolActiveVoteStrucVoting = "_harvest_user_pool_activeVote_struc"
let keyLimitShareFirstHarvest = "share_limit_on_first_harvest"
let keyAssetIdA = "A_asset_id"
let keyAssetIdB = "B_asset_id"
let keyFirstHarvestHeight = "first_harvest_height"
let keyfirstHarvestCpmm = "first_harvest"
let governanceAddress = Address(base58'3PLHVWCqA9DJPDbadUofTohnCULLauiDWhS')
let wallet = Address(base58'3P6J84oH51DzY6xk2mT5TheXRbrCwBMxonp')
let votingAddress = Address(base58'3PQZWxShKGRgBN1qoJw6B4s9YWS9FneZTPg')
let adminIncreaseInterestAddress = Address(base58'3PPupsBVHgDXaRhyMbkTxminzAotp8AMsr6')
let oneWeekInBlock = 10106 # 1440*7*60/59.84 where 59.84 - real block duration in seconds
let totalVoteShare = 10000000000
let scaleValue1 = 10
let scaleValue3 = 1000
let scaleValue5 = 100000
let scaleValue6 = 1000000
let scaleValue8 = 100000000
let scaleValue11 = 100000000000

func strAssetIdA(pool:Address)= pool.getStringValue(keyAssetIdA)
func strAssetIdB(pool:Address) = pool.getStringValue(keyAssetIdB)
func assetIdA(pool:Address) = if strAssetIdA(pool) == "WAVES" then unit else strAssetIdA(pool).fromBase58String()
func assetIdB(pool:Address) = if strAssetIdB(pool) == "WAVES" then unit else strAssetIdB(pool).fromBase58String()
let kBasePeriod = "base_period"
let kPeriodLength = "period_length"
let kStartHeight = "start_height"
let kFirstHarvestHeight = "first_harvest_height"
let kDurationFullVotePower = "duration_full_vote_power"
let kMinVotePower = "min_vote_power"

let basePeriod = votingAddress.getInteger(kBasePeriod).valueOrErrorMessage("Empty kBasePeriod") # 0
let startHeight = votingAddress.getInteger(kStartHeight).valueOrErrorMessage("Empty kStartHeight")
let periodLength =  votingAddress.getInteger(kPeriodLength).valueOrErrorMessage("Empty kPeriodLength")  # 10102
let durationFullVotePower = votingAddress.getInteger(kDurationFullVotePower).valueOrErrorMessage("Empty kDurationFullVotePower") # 1443, 1 days in block after voting start
let minVotePower = votingAddress.getInteger(kMinVotePower).valueOrErrorMessage("Empty kMinVotePower") # 10000000, minVoteCoeff/scale8 between 0 and 1 - voting power if vote at the end of voting period

let currPeriod = basePeriod + (height-startHeight)/periodLength
func getLimitToken(pool:Address) = pool.getIntegerValue(keyLimitShareFirstHarvest).valueOrElse(0)

let APY = this.getIntegerValue(keyAPY)
let SwopYearEmission = this.getIntegerValue(keySwopYearEmission)

func assetNameA(pool:Address)  = match assetIdA(pool) {
    case id: ByteVector => assetInfo(id).value().name
    case waves: Unit => "WAVES"
}
func assetNameB(pool:Address)  = match assetIdB(pool) {
    case id: ByteVector => assetInfo(id).value().name
    case waves: Unit => "WAVES"
}

let SWOP = this.getStringValue(keySWOPid).fromBase58String()
func isFirstHarvest(pool:Address) = pool.getBoolean(keyfirstHarvestCpmm).valueOrElse(false)

func getHeightFirstHarvest(pool:Address) = pool.getInteger(keyFirstHarvestHeight).valueOrElse(0)

func getBalanceA(pool:Address) = pool.getInteger(keyBalancecpmmA)
                                                .valueOrErrorMessage("No data on the key: " + keyBalancecpmmA)

func getBalanceB(pool:Address) = pool.getInteger(keyBalancecpmmB)
                                                .valueOrErrorMessage("No data on the key: " + keyBalancecpmmB)

func getShareLimitToken(pool:Address) = pool.getInteger(kShareLimit)
                                                .valueOrErrorMessage("No data on the key: " + kShareLimit)

func getTotalShareTokenLocked(pool:String) = this.getInteger(pool + keyShareTokensLocked)
                                                .valueOrErrorMessage("No data on the key: " + pool + keyShareTokensLocked)

func getShareAssetId(pool:String) = pool.addressFromString().value().getStringValue("share_asset_id").fromBase58String()

func getAssetInfo(assetId: ByteVector|Unit) = match assetId {
    case id: ByteVector =>
        let stringId = id.toBase58String()
        let info = assetInfo(id).valueOrErrorMessage("Asset " + stringId + " doesn't exist")
        (stringId, info.name, info.decimals)
    case waves: Unit => ("WAVES", "WAVES", 8)
}

# Calculate scale value for assetId1/assetId2 with 8 digits after delimiter

func calcScaleValue(assetId1:ByteVector,assetId2:ByteVector) = {
    let assetId1Decimals = assetId1.assetInfo().value().decimals
    let assetId2Decimals = assetId2.assetInfo().value().decimals
    let scaleDigits = assetId2Decimals-assetId1Decimals+8
    pow(10,0,scaleDigits,0,0,HALFDOWN)
}

func userAvailableSWOP(pool:String, user:Address) = this.getInteger(pool+"_"+user.toString() + keyAvailableSWOP).valueOrElse(0)

func rewardInfo(pool:String) = {
    let totalRewardPerBlockCurrent = governanceAddress.getInteger(keyTotalRewardPerBlockCurrent)
                                    .valueOrErrorMessage("No data on the key: " + keyTotalRewardPerBlockCurrent + " at address " + governanceAddress.toString())
    let totalRewardPerBlockPrevious = governanceAddress.getInteger(keyTotalRewardPerBlockPrevious)
                                    .valueOrErrorMessage("No data on the key: " + keyTotalRewardPerBlockPrevious + " at address " + governanceAddress.toString())
    let rewardPoolFractionCurrent = governanceAddress.getInteger(pool + keyRewardPoolFractionCurrent)
                                    .valueOrErrorMessage("No data on the key: " + pool + keyRewardPoolFractionCurrent + " at address " + governanceAddress.toString())
    let rewardUpdateHeight = governanceAddress.getInteger(keyRewardUpdateHeight)
                                    .valueOrErrorMessage("No data on the key: " + keyRewardUpdateHeight + " at address " + governanceAddress.toString())
    let rewardPoolFractionPrevious = governanceAddress.getInteger(pool + keyRewardPoolFractionPrevious)
                                    .valueOrErrorMessage("No data on the key: " + pool + keyRewardPoolFractionPrevious + " at address " + governanceAddress.toString())

    let rewardPoolCurrent = totalRewardPerBlockCurrent.fraction(rewardPoolFractionCurrent,totalVoteShare)
    let rewardPoolPrevious =  totalRewardPerBlockPrevious.fraction(rewardPoolFractionPrevious,totalVoteShare)

    if rewardPoolCurrent > totalRewardPerBlockCurrent || rewardPoolPrevious > totalRewardPerBlockPrevious then
        throw("rewardPoolCurrent > totalRewardPerBlockCurrent or rewardPoolPrevious > totalRewardPerBlockPrevious")
    else
    (rewardPoolCurrent,rewardUpdateHeight,rewardPoolPrevious)
}

func getLastInterestInfo(pool:String) = {
    let lastInterest = this.getInteger(pool + keyLastInterest)
                           .valueOrErrorMessage("No data on the key: " + pool + keyLastInterest)
    let lastInterestHeight = this.getInteger(pool + keyLastInterestHeight)
                                 .valueOrElse(height)
    (lastInterestHeight,lastInterest)
}

func getUserInterestInfo(pool:String, userAddress:Address) = {
    let userLastInterest = this.getInteger(pool + "_" + userAddress.toString() + keyUserLastInterest)
    let userShare = this.getInteger(pool + "_" + userAddress.toString() + keyUserShareTokensLocked)
    let lastInterest = this.getInteger(pool + keyLastInterest)
                           .valueOrErrorMessage("No data on the key: " + pool + keyLastInterest)
    let userLastInterestValue = match userLastInterest {
        case userLastInterest: Int => userLastInterest
        case _ => lastInterest
    }
    let userShareTokensAmount = match userShare {
        case userShare: Int => userShare
        case _ => 0
    }
    (userLastInterestValue,userShareTokensAmount)
}

func calcInterest(lastInterestHeight:Int,rewardUpdateHeight:Int,lastInterest:Int,currentRewardPerBlock:Int,shareTokenLocked:Int,previousRewardPerBlock:Int,shareAssetId:ByteVector,scaleValue:Int) = {
    if shareTokenLocked == 0 then 0 else # this condition true only for the first call

    if height < rewardUpdateHeight then # in case of updating reward info at gov dApp
        let reward = previousRewardPerBlock*(height-lastInterestHeight)
        lastInterest + fraction(reward,scaleValue,shareTokenLocked) # interests[n] = interests[n-1] + reward[n] / totalSupplyLP(n)
    else
        if (lastInterestHeight > rewardUpdateHeight) then
            let reward = currentRewardPerBlock*(height-lastInterestHeight)
            lastInterest + fraction(reward,scaleValue,shareTokenLocked) # interests[n] = interests[n-1] + reward[n] / totalSupplyLP(n)
        else # in case if reward updated we need update interest
            let rewardAfterLastInterestBeforeReawardUpdate = previousRewardPerBlock*(rewardUpdateHeight-lastInterestHeight)
            let interestAfterUpdate = lastInterest + fraction(rewardAfterLastInterestBeforeReawardUpdate,scaleValue,shareTokenLocked)
            let reward = currentRewardPerBlock*(height-rewardUpdateHeight)
            interestAfterUpdate + fraction(reward,scaleValue,shareTokenLocked) # interests[n] = interests[n-1] + reward[n] / totalSupplyLP(n)
}

func claimCalc(pool:String,caller:Address) = {
    let shareAssetId = getShareAssetId(pool)
    let scaleValue = calcScaleValue(SWOP,shareAssetId) # return scale8 value with considering digits in assets
    let shareTokenLocked = getTotalShareTokenLocked(pool)
    let (lastInterestHeight,lastInterest) = getLastInterestInfo(pool)
    let (currentRewardPerBlock,rewardUpdateHeight,previousRewardPerBlock) = rewardInfo(pool)
    let (userLastInterest,userShareTokensAmount) = getUserInterestInfo(pool,caller)
    let currentInterest = calcInterest(lastInterestHeight,rewardUpdateHeight,lastInterest,currentRewardPerBlock,shareTokenLocked,previousRewardPerBlock,shareAssetId,scaleValue) # multiple by scale8
    let claimAmount = fraction(userShareTokensAmount,currentInterest-userLastInterest,scaleValue)
    let userNewInterest = currentInterest
    (userNewInterest,currentInterest,claimAmount,userShareTokensAmount)
}

func calculateProtocolReward(pool:String) ={
    let (lastInterestHeight,lastInterest) = getLastInterestInfo(pool)
    let (currentRewardPerBlock,rewardUpdateHeight,previousRewardPerBlock) = rewardInfo(pool)
    let shareTokenLocked = getTotalShareTokenLocked(pool)
    if shareTokenLocked == 0 then
        if height < rewardUpdateHeight then
            let reward = previousRewardPerBlock*(height-lastInterestHeight)
            reward
        else
            if (lastInterestHeight > rewardUpdateHeight) then
                let reward = currentRewardPerBlock*(height-lastInterestHeight)
                reward
            else
                let rewardAfterLastInterestBeforeReawardUpdate = previousRewardPerBlock*(rewardUpdateHeight-lastInterestHeight)
                let reward = currentRewardPerBlock*(height-rewardUpdateHeight)
                reward + rewardAfterLastInterestBeforeReawardUpdate
    else
        0
}

func checkPmtAssetIdCorrect(pool:String,pmtAssetId:ByteVector|Unit) = {
   let poolShareAssetId = pool.addressFromString().value().getStringValue("share_asset_id").fromBase58String()
   if pmtAssetId == poolShareAssetId then true else false
}

func getUserSWOPClaimedAmount(pool:String,user:Address) =  this.getInteger(pool + "_" + user.toString() + keyUserSWOPClaimedAmount)
                                                .valueOrElse(0)

@Callable(i)
func init(earlyLP:String) = {
    if this.getString(keySWOPid).isDefined() then throw("SWOP already initialized") else
    let initAmount = 100000000000000
    let SWOPissue = Issue("SWOP", "SWOP protocol token", initAmount, 8, true)
    let SWOPid = SWOPissue.calculateAssetId()
    [
        Issue("SWOP", "SWOP protocol token", initAmount, 8, true),
        StringEntry(keySWOPid, SWOPid.toBase58String())
    ]
}

@Callable(i)
func initPoolShareFarming(pool:String) = {
    if i.caller != this then
        throw("Only the DApp itself can call this function")
    else
    let (currentReward,rewardUpdateHeight,previousRewardPerBlock) = rewardInfo(pool)
    [
        IntegerEntry(pool + keyShareTokensLocked, 0),
        IntegerEntry(pool + keyLastInterest, 0),
        IntegerEntry(pool + keyLastInterestHeight,height)

    ]
}

@Callable(i)
func updatePoolInterest(pool:String) = {
    if i.caller != wallet then
        throw("Only the Admin itself can call this function")
    else
    let (userNewInterest,currentInterest,claimAmount,userShareTokensAmount) = claimCalc(pool,adminIncreaseInterestAddress,0)
    let (currentReward,rewardUpdateHeight,previousRewardPerBlock) = rewardInfo(pool)
    [
        IntegerEntry(pool + keyShareTokensLocked, 0),
        IntegerEntry(pool + keyLastInterest, userNewInterest),
        IntegerEntry(pool + keyLastInterestHeight,height)
    ]
}

@Callable(i)
func lockShareTokens(pool:String) = {
    let (pmtAmount, pmtAssetId) = (i.payments[0].amount, i.payments[0].assetId)
    let (pmtStrAssetId, pmtAssetName, pmtDecimals) = getAssetInfo(pmtAssetId)
    let (userNewInterest,currentInterest,claimAmount,userShareTokensAmount) = claimCalc(pool,i.caller,pmtAmount)
    let userShareAmountNew = userShareTokensAmount+pmtAmount
    let availableFundsNew = userAvailableSWOP(pool,i.caller) + claimAmount
    let totalShareAmount = getTotalShareTokenLocked(pool)
    let totalShareAmountNew = totalShareAmount + pmtAmount
    let userClaimedAmount = getUserSWOPClaimedAmount(pool,i.caller)
    let userClaimedAmountNew = userClaimedAmount + claimAmount
    let baseEntry = [
                        IntegerEntry(pool + "_" + i.caller.toString() + keyUserLastInterest, userNewInterest),
                        IntegerEntry(pool + "_" + i.caller.toString() + keyUserShareTokensLocked, userShareAmountNew),
                        IntegerEntry(pool + keyShareTokensLocked, totalShareAmountNew),
                        IntegerEntry(pool + keyLastInterest, currentInterest),
                        IntegerEntry(pool + keyLastInterestHeight, height),
                        IntegerEntry(pool + "_" + i.caller.toString() + keyUserSWOPClaimedAmount, userClaimedAmountNew),
                        IntegerEntry(pool + "_" + i.caller.toString() + keyUserSWOPLastClaimedAmount, claimAmount),
                        IntegerEntry(pool + "_" + i.caller.toString() + keyAvailableSWOP, availableFundsNew)
                    ]

    if (pmtAmount <= 0) then
        throw("You can't lock token")
    else if !checkPmtAssetIdCorrect(pool,pmtAssetId) then throw("Incorrect pmtAssetId")
    else if (isFirstHarvest(Address(pool.fromBase58String())) && getHeightFirstHarvest(Address(pool.fromBase58String())) > height) then {
        let harvestPeriod = (getHeightFirstHarvest(Address(pool.fromBase58String())) - startHeight + 1) / periodLength - 1
        let amountOfVoting = votingAddress.getStringValue(i.caller.toString() + "_" + pool + "_user_pool_struc").split("_")
        let amountPoolStract = votingAddress.getStringValue(pool + "_pool_struc").split("_")
        let amountActiveVoteUserPoolStract = votingAddress.getString(i.caller.toString() + "_" + pool + kHarvestUserPoolActiveVoteStrucVoting).valueOrElse("").split("_")
        let amountPoolActiveVoteStract = votingAddress.getString(pool + kHarvestPoolActiveVoteStrucVoting).valueOrElse("").split("_")
        let userShareTokenLocked = userShareTokensAmount
        let userPoolActiveVote = if currPeriod.toString() == amountOfVoting[2] then {parseInt(amountActiveVoteUserPoolStract[0]).valueOrElse(0)} else {parseInt(amountOfVoting[1]).valueOrElse(0)}
        let poolActiveVote = if currPeriod.toString() == amountPoolStract[2] then {parseInt(amountPoolActiveVoteStract[0]).valueOrElse(0)} else {parseInt(amountPoolStract[1]).valueOrElse(0)}
        let protocolReward = calculateProtocolReward(pool)
            if(userPoolActiveVote != 0) then {
                let limitShareToken = getShareLimitToken(pool.addressFromStringValue())
                let shareToken = fraction(limitShareToken,userPoolActiveVote,poolActiveVote) - userShareTokenLocked
                if amountActiveVoteUserPoolStract.size() > 1 && parseInt(amountActiveVoteUserPoolStract[1]).valueOrElse(0) >= harvestPeriod then
                    throw("You can't share token")
                else if (pmtAmount > limitShareToken) then
                    throw("You can't share token more than " + limitShareToken.toString())
                else if (shareToken > 0) then {
                    if (totalShareAmount == 0) then {
                        baseEntry ++ [
                            Reissue(SWOP, protocolReward, true),
                            ScriptTransfer(wallet, protocolReward, SWOP) ]
                    } else if (pmtAmount <= shareToken) then {
                        baseEntry
                    } else
                        throw("Your maximum share token is " + shareToken.toString())
                } else
                    throw("You can't share token")
            } else {
                throw("Your amount of token less than 0")
            }
        }
    else {
        baseEntry
    }
}

@Callable(i)
func withdrawShareTokens(pool:String,shareTokensWithdrawAmount:Int) = {
    let shareTokensId =  pool.addressFromString().value().getStringValue("share_asset_id").fromBase58String()
        let (userNewInterest,currentInterest,claimAmount,userShareTokensAmount) = claimCalc(pool,i.caller,1)
        let userShareAmountNew = userShareTokensAmount-shareTokensWithdrawAmount
        let availableFundsNew = userAvailableSWOP(pool,i.caller) + claimAmount
        let totalShareAmount = getTotalShareTokenLocked(pool)
        let totalShareAmountNew = totalShareAmount - shareTokensWithdrawAmount
        let userClaimedAmount = getUserSWOPClaimedAmount(pool,i.caller)
        let userClaimedAmountNew = userClaimedAmount + claimAmount

        if shareTokensWithdrawAmount > userShareTokensAmount then
            throw("Withdraw amount more then user locked amount")
        else
        [
            IntegerEntry(pool + "_" + i.caller.toString() + keyUserLastInterest, userNewInterest),
            IntegerEntry(pool + "_" + i.caller.toString() + keyUserShareTokensLocked, userShareAmountNew),
            IntegerEntry(pool +  keyLastInterest, currentInterest),
            IntegerEntry(pool + keyLastInterestHeight, height),
            IntegerEntry(pool + keyShareTokensLocked, totalShareAmountNew),
            IntegerEntry(pool+"_"+i.caller.toString() + keyAvailableSWOP, availableFundsNew),
            IntegerEntry(pool + "_" + i.caller.toString() + keyUserSWOPClaimedAmount, userClaimedAmountNew),
            IntegerEntry(pool + "_" + i.caller.toString() + keyUserSWOPLastClaimedAmount, claimAmount),
            ScriptTransfer(i.caller, shareTokensWithdrawAmount, shareTokensId)
        ]
}

@Callable(i)
func claim(pool:String) = {
    let shareTokenLocked = getTotalShareTokenLocked(pool)
    let (lastInterestHeight,lastInterest) = getLastInterestInfo(pool)
    let (currentRewardPerBlock, rewardUpdateHeight,previousRewardPerBlock) = rewardInfo(pool)
    let (userNewInterest,currentInterest,claimAmount,userShareTokensAmount) = claimCalc(pool,i.caller,1)
    let availableFund = userAvailableSWOP(pool,i.caller) + claimAmount
    let userClaimedAmount = getUserSWOPClaimedAmount(pool,i.caller)
    let userClaimedAmountNew = userClaimedAmount + claimAmount
    if availableFund == 0 then
        throw("You have 0 available SWOP")
    else
    [
        IntegerEntry(pool + "_" + i.caller.toString() + keyUserLastInterest, userNewInterest),
        IntegerEntry(pool + keyLastInterest, currentInterest),
        IntegerEntry(pool + keyLastInterestHeight, height),
        IntegerEntry(pool + "_" + i.caller.toString() + keyAvailableSWOP, 0),
        Reissue(SWOP, availableFund, true),
        IntegerEntry(pool + "_" + i.caller.toString() + keyUserSWOPClaimedAmount, userClaimedAmountNew),
        IntegerEntry(pool + "_" + i.caller.toString() + keyUserSWOPLastClaimedAmount, claimAmount),
        ScriptTransfer(i.caller, availableFund, SWOP)
    ]
}

@Verifier(tx)
func verify() = match tx {
    case _ => {
        let adminPubKey1Signed = if sigVerify(tx.bodyBytes, tx.proofs[0], adminPubKey1) then 1 else 0
        let adminPubKey2Signed = if sigVerify(tx.bodyBytes, tx.proofs[1], adminPubKey2) then 1 else 0
        let adminPubKey3Signed = if sigVerify(tx.bodyBytes, tx.proofs[2], adminPubKey3) then 1 else 0
        adminPubKey1Signed + adminPubKey2Signed + adminPubKey3Signed >= 2
    }
}
